<p class="intro-p">
Ah, I love Python. It's a great general-purpose programming language that can be applied to many different classes of problems, which 
is why were going to dive into some Object Oriented Programming (OOP) with Python today.
</p>
<p>
I think the best way to learn is by example. So, let's start off by creating a class
</p>
<pre class="prettyprint">
<code>
from time import sleep
import tweepy as tp
import os

class Twitter_Bot:

    def __init__(self, consumer_key, consumer_secret, access_token, access_token_secret):
        self.consumer_key = consumer_key
        self.consumer_secret = consumer_secret
        self.access_token = access_token
        self.access_token_secret = access_token_secret
        self.api = self.authenticate()

    #apply twitter credentials to get api
    def authenticate(self):
        auth = tp.OAuthHandler(self.consumer_key, self.consumer_secret)
        auth.set_access_token(self.access_token, self.access_token_secret)

        return tp.API(auth)

    def loop_through_tweets(self, query, num_items, action):
        tweets = tp.Cursor(self.api.search, q=query).items(num_items)

        for t in tweets:
            try:
                print(t.text)
                if action is 'follow':
                    getattr(getattr(t, 'user'), action)()
                else:
                    getattr(t, action)()
                sleep(10)
            except tp.TweepError as e:
                print(e.reason)

    #retweet posts by search query
    def retweet_post(self, query, num_items):
        self.loop_through_tweets(query=query, num_items=num_items, action='retweet')

    #follow users by search query
    def follow_user(self, query, num_items):
        self.loop_through_tweets(query=query, num_items=num_items, action='follow')

    #update status with scraped web images
    def tweet_images(self):
        #go to the directory with the images
        os.chdir('twitter_content/twitter_images')

        #get images in  current directory
        images = os.listdir('.')

        #tweet each image
        for image in images:
            try:
                self.api.update_with_media(image)
                sleep(10)
            except tp.TweepError as e:
                print(e.reason)

</code>
</pre>
<button class="button expand-code">Expand Code</button>
<p>So, you might feel a little overwhelmed looking at that script, but I promise that this is easy, and you'll understand the code with my awesome explaining skills. Also, this post assumes that you are familiar with OOP (Object Oriented Programming) in Python. If you are not, here is a <a href="https://python.swaroopch.com/oop.html" target="__blank" rel="noopener noreferrer">tutorial</a> to get you started</p>
<p>So, on lines 1 through 3, we are going to start out by importing some modules we'll need. <code class="prettyprint">getParent(document.getElementById('ele'), '#parent');</code></p>
<code class="prettyprint margin-bottom inline-block">getParent(document.getElementById('ele'), '#parent');</code>
<p>This will fetch the first parent matching the id of <code class="prettyprint">#parent</code>. Now, that we see how to use it. Let's dive into how it works.</p>
<h2>The Break Down</h2>
<p>Let's dive into each part of the code, and I'll explain how it works. We'll start of by analyzing the third line.</p>
<code class="prettyprint margin-bottom inline-block">var parentSelectorType = parentSelector.substring(0, 1);</code>
<p>Now, this line of code takes our input string <code class="prettyprint">parentSelector</code> and grabs the first character in it. Let's go back to our first example. I input a string of <code class="prettyprint"></code></p>
